var documenterSearchIndex = {"docs":
[{"location":"client/#Client","page":"Client","title":"Client","text":"","category":"section"},{"location":"client/#Object","page":"Client","title":"Object","text":"","category":"section"},{"location":"client/#SAMP.SAMPClient","page":"Client","title":"SAMP.SAMPClient","text":"SAMPClient{H <:AbstractSAMPHub}\n\nA structure representing a SAMP client.\n\nThe same structure is used for clients of a SAMPHub or of SAMPWebHub.\n\nMembers\n\nhub: the hub server\nname: the name of the client (compulsory)\nkey: a string representing the secret key used by the client to contact the server\nhub_id: the id the hub has assigned to himself\nclient_id: the id the hud has assigned to the client\ntranslator: the URL translator (only present if the server is a SAMPWebHub)\n\nContructors\n\nSAMPClient(hub, name)\nregister(hub, name [; metadata])\n\nThe first form simply create and register the client. The second form, register, also accepts metadata as keywords, which will be sent to the server (see setMetadata).\n\n\n\n\n\n","category":"type"},{"location":"client/#SAMP.register","page":"Client","title":"SAMP.register","text":"SAMPClient{H <:AbstractSAMPHub}\n\nA structure representing a SAMP client.\n\nThe same structure is used for clients of a SAMPHub or of SAMPWebHub.\n\nMembers\n\nhub: the hub server\nname: the name of the client (compulsory)\nkey: a string representing the secret key used by the client to contact the server\nhub_id: the id the hub has assigned to himself\nclient_id: the id the hud has assigned to the client\ntranslator: the URL translator (only present if the server is a SAMPWebHub)\n\nContructors\n\nSAMPClient(hub, name)\nregister(hub, name [; metadata])\n\nThe first form simply create and register the client. The second form, register, also accepts metadata as keywords, which will be sent to the server (see setMetadata).\n\n\n\n\n\n","category":"function"},{"location":"client/#Methods","page":"Client","title":"Methods","text":"","category":"section"},{"location":"client/#SAMP.unregister","page":"Client","title":"SAMP.unregister","text":"unregister(client)\n\nUnregister client from the associated hub.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.setMetadata","page":"Client","title":"SAMP.setMetadata","text":"setMetadata(client; metadata)\ndeclareMetadata(client; metadata)\n\nSet the metadata associated with the client.\n\nThe metadata are passed as keyword arguments; metadata consisting of non-valid Julia keywords can be passed with the var\"long.name\" syntax. For example\n\nsetMetadata(client; var\"samp.description.text\"=\"A fast FITS image displayer\")\n\nIf this function is called multiple times, the latest metadata are kept (all the others are discarded). Both functions are identical: declareMetadata is just an alias for setMetadata, kept to honour the original SAMP command.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.declareMetadata","page":"Client","title":"SAMP.declareMetadata","text":"setMetadata(client; metadata)\ndeclareMetadata(client; metadata)\n\nSet the metadata associated with the client.\n\nThe metadata are passed as keyword arguments; metadata consisting of non-valid Julia keywords can be passed with the var\"long.name\" syntax. For example\n\nsetMetadata(client; var\"samp.description.text\"=\"A fast FITS image displayer\")\n\nIf this function is called multiple times, the latest metadata are kept (all the others are discarded). Both functions are identical: declareMetadata is just an alias for setMetadata, kept to honour the original SAMP command.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.getMetadata","page":"Client","title":"SAMP.getMetadata","text":"getMetadata(client, id=client.client_id)\n\nReturn the metadata set for the client with the given id.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.getSubscriptions","page":"Client","title":"SAMP.getSubscriptions","text":"getSubscriptions(client, id)\n\nReturn the subscriptions for the client with the given id.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.getRegisteredClients","page":"Client","title":"SAMP.getRegisteredClients","text":"getRegisteredClients(client)\n\nReturn a list of all clients registered with the hub of client.\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.getSubscribedClients","page":"Client","title":"SAMP.getSubscribedClients","text":"getSubscribedClients(client, mtype)\n\nReturn a list of all clients that subscribed to the given mtype.\n\n\n\n\n\n","category":"function"},{"location":"client/#Base.notify-Tuple{SAMPClient, String, String}","page":"Client","title":"Base.notify","text":"notify(client, dest, mtype [; args...])\n\nNotify the message mtype with the optional arguments args to dest.\n\ndest must be the ID of the destination client: this can be obtained from getSubscribedClients or getRegisteredClients.\n\nThe optional message arguments can be passed as keywords: as with setMetadata, arguments with non-valid Julia names can be entered as var\"long.name\"=value.\n\n\n\n\n\n","category":"method"},{"location":"client/#SAMP.notifyAll","page":"Client","title":"SAMP.notifyAll","text":"notifyAll(client, mtype [; args...])\n\nNotify the message mtype to all clients.\n\nSee also: notify\n\n\n\n\n\n","category":"function"},{"location":"client/#SAMP.callAndWait","page":"Client","title":"SAMP.callAndWait","text":"callAndWait(client, dest, mtype; timeout=0 [, args...])\n\nSend the message mtype to dest and wait for the reply.\n\nArguments to the message can be added as keywords, similarly to notify.\n\nThe timeout keyword controls the timeout in seconds: if set to 0 or to a negative number, there is no timeout (this is the default). Note that in this case the client can wait indefinitely.\n\n\n\n\n\n","category":"function"},{"location":"results/#SAMP-Results","page":"Results","title":"SAMP Results","text":"","category":"section"},{"location":"results/#SAMP.SAMPResult","page":"Results","title":"SAMP.SAMPResult","text":"The parent of all SAMP results\n\n\n\n\n\n","category":"type"},{"location":"results/#SAMP.SAMPSuccess","page":"Results","title":"SAMP.SAMPSuccess","text":"SAMPSuccess <:SAMPResult\n\nA successful SAMP result\n\nField\n\nvalue: the return value provided\n\n\n\n\n\n","category":"type"},{"location":"results/#SAMP.SAMPError","page":"Results","title":"SAMP.SAMPError","text":"SAMPError <:SAMPResult\n\nA faulty SAMP result.\n\nFields\n\nerror: the error raised, as a string\nuser: an optional additional user message\ndebug: an optional longer string which may contain more detail on what went wrong. This is typically intended for debugging purposes, and may for instance be a stack trace.\ncode: an optional string containing a numeric or textual code identifying the error, perhaps intended to be parsable by software.\n\n\n\n\n\n","category":"type"},{"location":"results/#SAMP.SAMPWarning","page":"Results","title":"SAMP.SAMPWarning","text":"SAMPWarning <:SAMPResult\n\nA partially successful SAMP result.\n\nFields\n\nvalue: the value returned\nwarning: a structure of type SAMPError, with details on what went wrong\n\n\n\n\n\n","category":"type"},{"location":"#SAMP","page":"SAMP","title":"SAMP","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"This package provides a Julia implementation of the Simple Application Messaging Protocol (SAMP), a messaging protocol that enables astronomy software tools to interoperate and communicate (see also Taylor et al. 2015).","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Currently, the package implements only the non-callable client interface: this allows one to send synchronous message to SAMP-aware applications such as SAOImage DS9, TOPCAT, Aladin Sky Atlas and similar.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"The package can also connect using a WEB hub provided, for example, by Aladin lite.","category":"page"},{"location":"#Example","page":"SAMP","title":"Example","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"Open TOPCAT and, then, SAOImage DS9 on your local computer.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Then type the following commands on the Julia REPL:","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"julia> using SAMP\n\njulia> hub = SAMPHub();\n\njulia> client = register(hub, \"Test\"; \n       description=\"Simple test of SAMP.jl\", version=v\"1.0.0\");\n\njulia> ds9 = first(getSubscribedClients(client, \"ds9.get\"))\n\"c2\"\n\njulia> getMetadata(client, ds9)\nDict{Any, Any} with 9 entries:\n  \"samp.icon.url\"          => \"http://ds9.si.edu/sun.png\"\n  \"author.name\"            => \"William Joye\"\n  \"author.affiliation\"     => \"Smithsonian Astrophysical Observatory\"\n  \"ds9.version\"            => \"8.6\"\n  \"home.page\"              => \"http://ds9.si.edu/\"\n  \"samp.description.text\"  => \"SAOImageDS9 is an astronomical visualization application\"\n  \"samp.documentation.url\" => \"http://ds9.si.edu/doc/ref/index.html\"\n  \"samp.name\"              => \"ds9\"\n  \"author.email\"           => \"ds9help@cfa.harvard.edu\"\n\njulia> callAndWait(client, ds9, \"ds9.get\"; cmd=\"version\")\nSAMP.SAMPSuccess{Dict{Any, Any}}(Dict{Any, Any}(\"value\" => \"ds9 8.6\"))\n\njulia> notify(client, ds9, \"image.load.fits\"; \n       url=\"https://fits.gsfc.nasa.gov/samples/UITfuv2582gc.fits\", name=\"Astro UIT\")","category":"page"},{"location":"hubs/#Hub-discovery","page":"Hub discovery","title":"Hub discovery","text":"","category":"section"},{"location":"hubs/#SAMP.AbstractSAMPHub","page":"Hub discovery","title":"SAMP.AbstractSAMPHub","text":"The parent of SAMPHub and SAMPWebHub.\n\n\n\n\n\n","category":"type"},{"location":"hubs/#SAMP.SAMPHub","page":"Hub discovery","title":"SAMP.SAMPHub","text":"SAMPHub <: [`AbstractSAMPHub`](@ref)\n\nA local SAMP hub.\n\nCan be created by a simple call SAMPHub(): all fields are automatically set following the SAMP protocl.\n\nMembers\n\nproxy: the XMLRPC proxy associated with the hub\nurl: the hub URL\nsecret: the hub secret (used for the client registration)\nversion: the hub version, as a string\nconf: a dictionary with all hub configuration parameters\n\n\n\n\n\n","category":"type"},{"location":"hubs/#SAMP.SAMPWebHub","page":"Hub discovery","title":"SAMP.SAMPWebHub","text":"SAMPWebHub <: [`AbstractSAMPHub`](@ref)\n\nA Web SAMP hub.\n\nCan be created by a simple call SAMPWebHub(): all fields are automatically set following the SAMP protocl.\n\nMembers\n\nproxy: the XMLRPC proxy associated with the hub\nurl: the hub URL (always equal to \"http://localhost:21012/\")\n\n\n\n\n\n","category":"type"},{"location":"hubs/#SAMP.ping","page":"Hub discovery","title":"SAMP.ping","text":"ping(hub)\n\nPing the hub.\n\nThis function retunrs nothing if the hub can be pinged; otherwise, an error is thrown.\n\n\n\n\n\n","category":"function"}]
}
