var documenterSearchIndex = {"docs":
[{"location":"client/#Client","page":"Client","title":"Client","text":"","category":"section"},{"location":"client/#Object","page":"Client","title":"Object","text":"","category":"section"},{"location":"client/#VirtualObservatorySAMP.SAMPClientId","page":"Client","title":"VirtualObservatorySAMP.SAMPClientId","text":"SAMPClientId\n\nA simple structure to save the client ID of a SAMP client.\n\nThis structure contains a single string field, client_id. It is defined only to avoid type piracy and to resolve some parameter ambiguities in the code.\n\n\n\n\n\n","category":"type"},{"location":"client/#VirtualObservatorySAMP.SAMPClient","page":"Client","title":"VirtualObservatorySAMP.SAMPClient","text":"SAMPClient{H <:VirtualObservatorySAMP.AbstractSAMPHub}\n\nA structure representing a SAMP client.\n\nThe same structure is used for clients of a SAMPHub or of SAMPWebHub.\n\nMembers\n\nhub: the hub server\nname: the name of the client (compulsory)\nkey: a string representing the secret key used by the client to contact the server\nhub_id: the id the hub has assigned to himself, as a SAMPClientId\nclient_id: the id the hud has assigned to the client, as a SAMPClientId\ntranslator: the URL translator (only present if the server is a SAMPWebHub)\nhub_query_by_meta: a string that, if non-void, indicates the mtype accepted by the hub to perform queries by meta (can be \"x-samp.query.by-meta\" or \"samp.query.by-meta\")\n\nConstructors\n\nSAMPClient([hub,] name)\nregister([hub,] name [; metadata])\n\nThe first form simply create and register the client. The second form, register, also accepts metadata as keywords, which will be sent to the server (see setMetadata).\n\n\n\n\n\n","category":"type"},{"location":"client/#VirtualObservatorySAMP.register","page":"Client","title":"VirtualObservatorySAMP.register","text":"SAMPClient{H <:VirtualObservatorySAMP.AbstractSAMPHub}\n\nA structure representing a SAMP client.\n\nThe same structure is used for clients of a SAMPHub or of SAMPWebHub.\n\nMembers\n\nhub: the hub server\nname: the name of the client (compulsory)\nkey: a string representing the secret key used by the client to contact the server\nhub_id: the id the hub has assigned to himself, as a SAMPClientId\nclient_id: the id the hud has assigned to the client, as a SAMPClientId\ntranslator: the URL translator (only present if the server is a SAMPWebHub)\nhub_query_by_meta: a string that, if non-void, indicates the mtype accepted by the hub to perform queries by meta (can be \"x-samp.query.by-meta\" or \"samp.query.by-meta\")\n\nConstructors\n\nSAMPClient([hub,] name)\nregister([hub,] name [; metadata])\n\nThe first form simply create and register the client. The second form, register, also accepts metadata as keywords, which will be sent to the server (see setMetadata).\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.defaultClient","page":"Client","title":"VirtualObservatorySAMP.defaultClient","text":"defaultClient::Union{SAMPClient,Nothing}\n\nThe default client.\n\nCan be obtained (and set, if it is nothing) using getClient.\n\n\n\n\n\n","category":"constant"},{"location":"client/#VirtualObservatorySAMP.getClient","page":"Client","title":"VirtualObservatorySAMP.getClient","text":"getClient()\n\nReturn the default client.\n\nThis function also sets it the first time it is called.\n\n\n\n\n\n","category":"function"},{"location":"client/#Methods","page":"Client","title":"Methods","text":"","category":"section"},{"location":"client/","page":"Client","title":"Client","text":"All methods can use the default client VirtualObservatorySAMP.defaultClient, which is automatically registered using the `VirtualObservatorySAMP.getClient method. This can be handy if one just need to perform queries and not receive messages.","category":"page"},{"location":"client/","page":"Client","title":"Client","text":"Each registered client (including the default one) should be unregistered by a call to `VirtualObservatorySAMP.unregister when not needed anymore. This is done automatically by the code at the exit of Julia.","category":"page"},{"location":"client/#VirtualObservatorySAMP.unregister","page":"Client","title":"VirtualObservatorySAMP.unregister","text":"unregister([client])\n\nUnregister client from the associated hub.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.setMetadata","page":"Client","title":"VirtualObservatorySAMP.setMetadata","text":"setMetadata([client]; metadata)\ndeclareMetadata([client]; metadata)\n\nSet the metadata associated with the client.\n\nThe metadata are passed as keyword arguments; metadata consisting of non-valid Julia keywords can be passed with the var\"long.name\" syntax. For example\n\nsetMetadata(client; var\"samp.description.text\"=\"A fast FITS image displayer\")\n\nStandard metadata can be entered using a shorter syntax. In particular, the following aliases are recognized\n\nname => samp.name\ndescription => samp.description.text\nicon => samp.icon.url\ndocumentation => samp.documentation.url\n\nNote that, by design, if no icon is provided this function uses a standard icon; if no icon is desired, enter icon=\"\" as keyword parameter.\n\nIf this function is called multiple times, the latest metadata are kept (all the others are discarded). Both functions are identical: declareMetadata is just an alias for setMetadata, kept to honour the original SAMP command.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.declareMetadata","page":"Client","title":"VirtualObservatorySAMP.declareMetadata","text":"setMetadata([client]; metadata)\ndeclareMetadata([client]; metadata)\n\nSet the metadata associated with the client.\n\nThe metadata are passed as keyword arguments; metadata consisting of non-valid Julia keywords can be passed with the var\"long.name\" syntax. For example\n\nsetMetadata(client; var\"samp.description.text\"=\"A fast FITS image displayer\")\n\nStandard metadata can be entered using a shorter syntax. In particular, the following aliases are recognized\n\nname => samp.name\ndescription => samp.description.text\nicon => samp.icon.url\ndocumentation => samp.documentation.url\n\nNote that, by design, if no icon is provided this function uses a standard icon; if no icon is desired, enter icon=\"\" as keyword parameter.\n\nIf this function is called multiple times, the latest metadata are kept (all the others are discarded). Both functions are identical: declareMetadata is just an alias for setMetadata, kept to honour the original SAMP command.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.getMetadata","page":"Client","title":"VirtualObservatorySAMP.getMetadata","text":"getMetadata([client,] dest=client.client_id)\ngetMetadata(dest)\n\nReturn the metadata set for the client dest.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.getSubscriptions","page":"Client","title":"VirtualObservatorySAMP.getSubscriptions","text":"getSubscriptions([client,] dest)\n\nReturn the subscriptions for the client dest.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.getRegisteredClients","page":"Client","title":"VirtualObservatorySAMP.getRegisteredClients","text":"getRegisteredClients([client])\n\nReturn a list of all clients registered with the hub of client.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.getSubscribedClients","page":"Client","title":"VirtualObservatorySAMP.getSubscribedClients","text":"getSubscribedClients([client,] mtype)\n\nReturn a list of all clients that subscribed to the given mtype.\n\n\n\n\n\n","category":"function"},{"location":"client/#Base.notify-Tuple{SAMPClient, SAMPClientId, String}","page":"Client","title":"Base.notify","text":"notify([client,] dest, mtype [; args...])\n\nNotify the message mtype with the optional arguments args to dest.\n\ndest must be the ID of the destination client: this can be obtained from getSubscribedClients or getRegisteredClients.\n\nThe optional message arguments can be passed as keywords: as with setMetadata, arguments with non-valid Julia names can be entered as var\"long.name\"=value.\n\nThe alias communicate is used to avoid type piracy.\n\n\n\n\n\n","category":"method"},{"location":"client/#VirtualObservatorySAMP.notifyAll","page":"Client","title":"VirtualObservatorySAMP.notifyAll","text":"notifyAll([client,] mtype [; args...])\n\nNotify the message mtype to all clients.\n\nSee also: notify\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.callAndWait","page":"Client","title":"VirtualObservatorySAMP.callAndWait","text":"callAndWait([client,] dest, mtype; timeout=0 [, args...])\n\nSend the message mtype to dest and wait for the reply.\n\nArguments to the message can be added as keywords, similarly to notify.\n\nThe timeout keyword controls the timeout in seconds: if set to 0 or to a negative number, there is no timeout (this is the default). Note that in this case the client can wait indefinitely.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.findFirstClient","page":"Client","title":"VirtualObservatorySAMP.findFirstClient","text":"findFirstClient([client,] name; key=\"samp.name\")\n\nReturn the first client with the metadata key = name\n\nReturns nothing if no client is found.\n\nname can be a simple string (and then it must match exactly key), or a regular expression.\n\nEquivalent to first(findFirstClient(client, name)), but with less allocations.\n\n\n\n\n\n","category":"function"},{"location":"client/#VirtualObservatorySAMP.findAllClients","page":"Client","title":"VirtualObservatorySAMP.findAllClients","text":"findAllClients([client,] name; key=\"samp.name\")\n\nReturn all clients with the metadata key = name\n\nname can be a simple string (and then it must match exactly key), or a regular expression.\n\n\n\n\n\n","category":"function"},{"location":"results/#SAMP-Results","page":"Results","title":"SAMP Results","text":"","category":"section"},{"location":"results/#VirtualObservatorySAMP.SAMPResult","page":"Results","title":"VirtualObservatorySAMP.SAMPResult","text":"The parent of all SAMP results\n\n\n\n\n\n","category":"type"},{"location":"results/#VirtualObservatorySAMP.SAMPSuccess","page":"Results","title":"VirtualObservatorySAMP.SAMPSuccess","text":"SAMPSuccess <:SAMPResult\n\nA successful SAMP result\n\nField\n\nvalue: the return value provided\n\n\n\n\n\n","category":"type"},{"location":"results/#VirtualObservatorySAMP.SAMPError","page":"Results","title":"VirtualObservatorySAMP.SAMPError","text":"SAMPError <:SAMPResult\n\nA faulty SAMP result.\n\nFields\n\nerror: the error raised, as a string\nuser: an optional additional user message\ndebug: an optional longer string which may contain more detail on what went wrong. This is typically intended for debugging purposes, and may for instance be a stack trace.\ncode: an optional string containing a numeric or textual code identifying the error, perhaps intended to be parsable by software.\n\n\n\n\n\n","category":"type"},{"location":"results/#VirtualObservatorySAMP.SAMPWarning","page":"Results","title":"VirtualObservatorySAMP.SAMPWarning","text":"SAMPWarning <:SAMPResult\n\nA partially successful SAMP result.\n\nFields\n\nvalue: the value returned\nwarning: a structure of type SAMPError, with details on what went wrong\n\n\n\n\n\n","category":"type"},{"location":"#VirtualObservatorySAMP","page":"SAMP","title":"VirtualObservatorySAMP","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"This package provides a Julia implementation of the Simple Application Messaging Protocol (SAMP), a messaging protocol that enables astronomy software tools to interoperate and communicate (see also Taylor et al. 2015).","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Currently, the package implements only the non-callable client interface: this allows one to send synchronous message to SAMP-aware applications such as SAOImage DS9, TOPCAT, Aladin Sky Atlas and similar.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"The package can also connect using a WEB hub provided, for example, by Aladin lite.","category":"page"},{"location":"#Example-1","page":"SAMP","title":"Example 1","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"Let us find all subscriptions that TOPCAT is providing.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Open TOPCAT, then type the following commands on the Julia REPL:","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"julia> using VirtualObservatorySAMP\n\njulia> hub = SAMPHub();\n\njulia> client = register(hub, \"Test\"; \n       description=\"Simple test of VirtualObservatorySAMP.jl\", version=v\"1.0.0\");\n\njulia> topcat = findFirstClient(client, \"topcat\")\n\njulia> getSubscriptions(client, topcat)\n\njulia> unregister(client)","category":"page"},{"location":"#Example-2","page":"SAMP","title":"Example 2","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"In this example we send various messages to SAOImage DS9. Additionally, we make use of a simplified calls: the first argument (client) is automatically replaced by the default client VirtualObservatorySAMP.defaultClient.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Open TOPCAT and, then, SAOImage DS9 on your local computer.","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"Then type the following commands on the Julia REPL:","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"julia> using VirtualObservatorySAMP\n\njulia> ds9 = first(getSubscribedClients(\"ds9.get\"))\n\"c2\"\n\njulia> getMetadata(ds9)\nDict{Any, Any} with 9 entries:\n  \"samp.icon.url\"          => \"http://ds9.si.edu/sun.png\"\n  \"author.name\"            => \"William Joye\"\n  \"author.affiliation\"     => \"Smithsonian Astrophysical Observatory\"\n  \"ds9.version\"            => \"8.6\"\n  \"home.page\"              => \"http://ds9.si.edu/\"\n  \"samp.description.text\"  => \"SAOImageDS9 is an astronomical visualization application\"\n  \"samp.documentation.url\" => \"http://ds9.si.edu/doc/ref/index.html\"\n  \"samp.name\"              => \"ds9\"\n  \"author.email\"           => \"ds9help@cfa.harvard.edu\"\n\njulia> callAndWait(ds9, \"ds9.get\"; cmd=\"version\")\nVirtualObservatorySAMP.SAMPSuccess{Dict{Any, Any}}(Dict{Any, Any}(\"value\" => \"ds9 8.6\"))\n\njulia> notify(ds9, \"image.load.fits\"; \n       url=\"https://fits.gsfc.nasa.gov/samples/UITfuv2582gc.fits\", name=\"Astro UIT\")\n\njulia> unregister()\n\njulia> @assert VirtualObservatorySAMP.defaultClient === nothing\n","category":"page"},{"location":"#Example-3","page":"SAMP","title":"Example 3","text":"","category":"section"},{"location":"","page":"SAMP","title":"SAMP","text":"Here we display a color image in SAOImage DS9. Start as a in the previous example, then type the following commands:","category":"page"},{"location":"","page":"SAMP","title":"SAMP","text":"julia> using VirtualObservatorySAMP\n\njulia> hub = SAMPHub();\n\njulia> client = register(hub, \"Test\"; \n       description=\"Simple test of VirtualObservatorySAMP.jl\", version=v\"1.0.0\");\n\njulia> ds9 = first(getSubscribedClients(client, \"ds9.get\"))\n\"c2\"\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"rgb\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"rgb red\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"url http://ds9.si.edu/download/data/673nmos.fits\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"zscale\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"rgb green\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"url http://ds9.si.edu/download/data/656nmos.fits\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"zscale\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"rgb blue\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"url http://ds9.si.edu/download/data/502nmos.fits\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"zscale\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"rotate 270\")\n\njulia> callAndWait(client, ds9, \"ds9.set\"; cmd=\"zoom to fit\")\n\njulia> unregister(client)","category":"page"},{"location":"hubs/#Hub-discovery","page":"Hub discovery","title":"Hub discovery","text":"","category":"section"},{"location":"hubs/#VirtualObservatorySAMP.AbstractSAMPHub","page":"Hub discovery","title":"VirtualObservatorySAMP.AbstractSAMPHub","text":"The parent of SAMPHub and SAMPWebHub.\n\n\n\n\n\n","category":"type"},{"location":"hubs/#VirtualObservatorySAMP.SAMPHub","page":"Hub discovery","title":"VirtualObservatorySAMP.SAMPHub","text":"SAMPHub <:VirtualObservatorySAMP.AbstractSAMPHub\n\nA local SAMP hub.\n\nCan be created by a simple call SAMPHub(): all fields are automatically set following the SAMP protocol.\n\nMembers\n\nproxy: the XMLRPC proxy associated with the hub\nurl: the hub URL\nsecret: the hub secret (used for the client registration)\nversion: the hub version, as a string\nconf: a dictionary with all hub configuration parameters\n\n\n\n\n\n","category":"type"},{"location":"hubs/#VirtualObservatorySAMP.SAMPWebHub","page":"Hub discovery","title":"VirtualObservatorySAMP.SAMPWebHub","text":"SAMPWebHub <:VirtualObservatorySAMP.AbstractSAMPHub\n\nA Web SAMP hub.\n\nCan be created by a simple call SAMPWebHub(): all fields are automatically set following the SAMP protocl.\n\nMembers\n\nproxy: the XMLRPC proxy associated with the hub\nurl: the hub URL (always equal to \"http://localhost:21012/\")\n\n\n\n\n\n","category":"type"},{"location":"hubs/#VirtualObservatorySAMP.defaultHub","page":"Hub discovery","title":"VirtualObservatorySAMP.defaultHub","text":"defaultHub::Union{SAMPHub,Nothing}\n\nThe default hub.\n\nCan be obtained (and set, if it is nothing) using getHub.\n\n\n\n\n\n","category":"constant"},{"location":"hubs/#VirtualObservatorySAMP.getHub","page":"Hub discovery","title":"VirtualObservatorySAMP.getHub","text":"getHub()\n\nReturn the default hub.\n\nThis function also sets it the first time it is called.\n\n\n\n\n\n","category":"function"},{"location":"hubs/#VirtualObservatorySAMP.ping","page":"Hub discovery","title":"VirtualObservatorySAMP.ping","text":"ping(hub)\n\nPing the hub.\n\nThis function retunrs nothing if the hub can be pinged; otherwise, an error is thrown.\n\n\n\n\n\nping(client, dest=client.client_id)\npint(dest)\n\nPing id; return nothing in case of success.\n\n\n\n\n\n","category":"function"}]
}
